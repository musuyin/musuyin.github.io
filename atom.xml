<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://musuyin.github.io</id>
    <title>木素音的博客</title>
    <subtitle>Musuyin&#39;s Blog</subtitle>
    <icon>https://musuyin.github.io/assets/favicon.ico</icon>
    <link href="https://musuyin.github.io" />
    <author>
      <name>Musuyin</name>
    </author>
    <updated>2025-09-21T07:06:24.000Z</updated>
    <entry>
        <id>https://musuyin.github.io/cs/basic/network/%E4%BC%A0%E8%BE%93%E5%B1%82/</id>
        <title>传输层</title>
        <link rel="alternate" href="https://musuyin.github.io/cs/basic/network/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
        <content type="html">&lt;h1 id=&#34;传输层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传输层&#34;&gt;#&lt;/a&gt; 传输层&lt;/h1&gt;
&lt;p&gt;位于应用层和网络层之间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为主机上的应用进程提供直接的通信服务&lt;/li&gt;
&lt;li&gt;接受网络层提供的服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;位于 OSI 体系结构中，端到端的&lt;strong&gt;最底&lt;/strong&gt;层次&lt;/p&gt;
&lt;h1 id=&#34;传输层服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传输层服务&#34;&gt;#&lt;/a&gt; 传输层服务&lt;/h1&gt;
&lt;h2 id=&#34;传输层协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传输层协议&#34;&gt;#&lt;/a&gt; 传输层协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;为运行在不同主机上的应用进程提供逻辑通信功能（使得主机好像是直接相连的）&lt;/li&gt;
&lt;li&gt;进程之间使用&lt;strong&gt;逻辑通信功能彼此发送报文&lt;/strong&gt;，无需考虑具体的物理链路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112130850-sso17f7.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;传输层协议运行在端系统，不在路由器中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送方：将应用程序的报文划分成若干段，封装后传给&lt;strong&gt;网络层&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;接收方：将网络层上传的报文段，重新装配为报文，传向&lt;strong&gt;应用层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;路由器只根据&lt;strong&gt;网络层&lt;/strong&gt;字段而动作&lt;/p&gt;
&lt;h2 id=&#34;传输层和网络层的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传输层和网络层的关系&#34;&gt;#&lt;/a&gt; 传输层和网络层的关系&lt;/h2&gt;
&lt;p&gt;传输层位于网络层上，依赖、强化网络层服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络层提供主机之间的逻辑通信&lt;/li&gt;
&lt;li&gt;传输层为运行在不同主机上的进程之间提供逻辑通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112131537-vokhxz5.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传输层协议工作在端系统中，将来自应用进程的报文移动到网络边界（网络层），不考虑报文如何在网络核心中传递&lt;/li&gt;
&lt;li&gt;中间路由器既不处理也不识别传输层加在报文上的任何信息&lt;/li&gt;
&lt;li&gt;存在多种传输层协议，每种协议为应用程序提供不同的服务模型&lt;/li&gt;
&lt;li&gt;传输层协议所能提供的服务受底层网络协议服务模型的限制（时延和带宽保证）&lt;/li&gt;
&lt;li&gt;某些特定服务即使底层网络协议不提供，传输层协议也能提供
&lt;ul&gt;
&lt;li&gt;如：当底层网络协议是不可靠的（分组丢失、混乱和重复），传输层同样能为应用程序提供可靠的传输服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;因特网传输层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因特网传输层&#34;&gt;#&lt;/a&gt; 因特网传输层&lt;/h2&gt;
&lt;h3 id=&#34;因特网传输层协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因特网传输层协议&#34;&gt;#&lt;/a&gt; 因特网传输层协议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UDP 用户数据报协议：为应用程序提供不可靠、无连接的服务&lt;/li&gt;
&lt;li&gt;TCP 传输控制协议：为应用程序提供可靠的、面向连接的服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;术语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#术语&#34;&gt;#&lt;/a&gt; 术语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;segment （报文段）&lt;/strong&gt;：传输层分组&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;datagram（数据报）&lt;/strong&gt;：网络层分组&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;因特网网络层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因特网网络层&#34;&gt;#&lt;/a&gt; 因特网网络层&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IP （网际协议）：为主机之间提供逻辑通信&lt;/li&gt;
&lt;li&gt;IP 服务模型：尽力交付任务
&lt;ul&gt;
&lt;li&gt;尽最大的努力在通信的主机之间交付报文段，但不保证按序交付或数据的完整性&lt;/li&gt;
&lt;li&gt;属于不可靠服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP 地址：主机的网络层地址
&lt;ul&gt;
&lt;li&gt;每台主机有一个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp-和-tcp-的服务模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp-和-tcp-的服务模型&#34;&gt;#&lt;/a&gt; UDP 和 TCP 的服务模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将两个端系统间 &lt;strong&gt;IP 的交付服务&lt;/strong&gt;扩展为运行在两个端系统上的进程之间的交付任务（传输层的多路复用与分解）&lt;/li&gt;
&lt;li&gt;可提供完整性检查&lt;/li&gt;
&lt;li&gt;UDP 是&lt;strong&gt;不可靠服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;TCP 提供&lt;strong&gt;可靠数据传输&lt;/strong&gt;以及&lt;strong&gt;拥塞控制&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;复用与分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复用与分解&#34;&gt;#&lt;/a&gt; 复用与分解&lt;/h1&gt;
&lt;p&gt;将网络层所提供的主机到主机交付服务扩展到在主机上运行的应用程序到应用程序的交付服务&lt;/p&gt;
&lt;p&gt;通常，主机上可以有多个应用程序进程运行（如一个 HTTP、一个 FTP、两个 Telnet）。当传输层从底层网络接收数据时，应能正确地定向到相应的一个进程（套接字）&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112132419-mimu5br.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;套接字-socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#套接字-socket&#34;&gt;#&lt;/a&gt; 套接字 Socket&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;从网络向进程传递数据，或从进程向网络传递数据的门户&lt;/li&gt;
&lt;li&gt;传输层和应用进程通过套接字来传递数据&lt;/li&gt;
&lt;li&gt;主机上的套接字可以有多个，每个套接字都有唯一的标识符（格式取决于 UDP 或 TCP）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112132540-1cn3256.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;复用和分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复用和分解&#34;&gt;#&lt;/a&gt; 复用和分解&lt;/h2&gt;
&lt;h3 id=&#34;多路复用发送主机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多路复用发送主机&#34;&gt;#&lt;/a&gt; 多路复用（发送主机）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;从不同套接字收集数据块，并为每个数据块封装&lt;strong&gt;首部信息&lt;/strong&gt;，生成报文段，传递到网络层&lt;/li&gt;
&lt;li&gt;一对一&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多路分解接收主机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多路分解接收主机&#34;&gt;#&lt;/a&gt; 多路分解（接收主机）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将报文段中的数据交付到正确的套接字&lt;/li&gt;
&lt;li&gt;即接收方传输层从报文段的多个字段中识别出套接字，并将报文段定向到该套接字&lt;/li&gt;
&lt;li&gt;一对多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112133029-brfz065.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机 1 上的传输层收集套接字输出的数据，形成&lt;strong&gt;传输层报文段&lt;/strong&gt;，将其传递给下面的网络层（多路复用）&lt;/li&gt;
&lt;li&gt;主机 2 的传输层将从其网络层收到的报文段多路分解后通过相应的&lt;strong&gt;套接字&lt;/strong&gt;交给其上的 P1 进程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目的主机的分解过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目的主机的分解过程&#34;&gt;#&lt;/a&gt; 目的主机的分解过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;当报文段到达主机时，传输层检查报文段中的目的端口号，将其定向到相应的套接字&lt;/li&gt;
&lt;li&gt;报文段中的数据通过套接字进入其所连接的进程&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;报文段格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报文段格式&#34;&gt;#&lt;/a&gt; 报文段格式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;端口号：主机上的每个套接字都分配有一个端口号（16 位：0~65535）
&lt;ul&gt;
&lt;li&gt;0~1023：周知端口号，保留给固定的应用程序&lt;/li&gt;
&lt;li&gt;开发一个新应用时，需选择一个端口号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112133348-zus03xc.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;无连接的多路复用与分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无连接的多路复用与分解&#34;&gt;#&lt;/a&gt; 无连接的多路复用与分解&lt;/h2&gt;
&lt;h3 id=&#34;组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组成&#34;&gt;#&lt;/a&gt; 组成&lt;/h3&gt;
&lt;p&gt;UDP 报文段：二元组（IP 地址，端口号）&lt;/p&gt;
&lt;p&gt;UDP 套接字：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个具有&lt;strong&gt;不同源套接字&lt;/strong&gt;，但具有&lt;strong&gt;相同目的套接字&lt;/strong&gt;的 UDP 报文段，可通过相同套接字定向到相同的目的进程（多对一）&lt;/li&gt;
&lt;li&gt;源端口号：目的方回发报文段中的返回地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建&#34;&gt;#&lt;/a&gt; 创建&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;自动从 1024 ～ 65535 的号码中，为该套接字分配一个主机尚未使用的 UDP 端口号。&lt;/li&gt;
&lt;li&gt;直接为套接字制定一个特定的端口号&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;客户机端：自动分配端口号&lt;/li&gt;
&lt;li&gt;服务器端：分配一个特定的端口号（如果使用周知协议，必须分配一个相应的周知端口号）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例&#34;&gt;#&lt;/a&gt; 实例&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112135731-l6u6s0a.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;主机 A 中的一个进程向主机 B 中的另一进程发送一个应用程序数据块。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机 A 的多路复用
&lt;ul&gt;
&lt;li&gt;传输层创建一个报文段
&lt;ul&gt;
&lt;li&gt;数据&lt;/li&gt;
&lt;li&gt;源端口&lt;/li&gt;
&lt;li&gt;目的端口号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传递到网络层&lt;/li&gt;
&lt;li&gt;网络层将该报文段封装到 IP 报文中，并尽力交付给接收主机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主机 B 的多路分解&lt;/li&gt;
&lt;li&gt;UDP 报文段到达接收方，主机 B 通过检查该报文段中的目的端口号，将报文段定向（多路分解）到相应的套接字，并交给相应进程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向连接的多路复用与分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向连接的多路复用与分解&#34;&gt;#&lt;/a&gt; 面向连接的多路复用与分解&lt;/h2&gt;
&lt;h3 id=&#34;组成-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组成-2&#34;&gt;#&lt;/a&gt; 组成&lt;/h3&gt;
&lt;p&gt;TCP 套接字：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;四元组（SourceIP, SourcePort, DestIP, DestPort）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;目的主机使用全部四个值来将收到的 TCP 报文段定向（分解）到相应的套接字&lt;/li&gt;
&lt;li&gt;两个具有&lt;strong&gt;不同源套接字&lt;/strong&gt;的 TCP 报文段，将被&lt;strong&gt;定向到两个不同的套接字&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;连接及分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接及分解&#34;&gt;#&lt;/a&gt; 连接及分解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务器应用程序&lt;/strong&gt;在某个端口上等待 TCP 客户机连接建立请求&lt;br /&gt;
​&lt;code&gt;ServerSocket welcomeSocket = newserverSocket(6789)&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP 客户机&lt;/strong&gt;在相应端口上产生一个连接建立请求报文段&lt;br /&gt;
​&lt;code&gt;Socket clientSocket = new Socket (&amp;quot;serverHostName&amp;quot;，6789)&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;当服务器收到客户机的连接请求后，通知服务器进程，并&lt;strong&gt;创建一个连接套接字&lt;/strong&gt;&lt;br /&gt;
​&lt;code&gt;Socket connectionSocket = WelcomeSocket.accept()&lt;/code&gt;​
&lt;ul&gt;
&lt;li&gt;连接套接字通过 4 个值来标识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TCP 连接完成后，客户机和服务器可相互发送数据&lt;/li&gt;
&lt;li&gt;当一个 TCP 报文段到达主机时，根据 4 个字段值来定向（多路分解）到相应的套接字&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例-2&#34;&gt;#&lt;/a&gt; 实例&lt;/h3&gt;
&lt;p&gt;主机 C 向服务器 B 发起两个 HTTP 会话；主机 A 向服务器 B 发起一个 HTTP 会话。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112141619-oyli59f.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 Web 服务器可以同时与&lt;strong&gt;多个&lt;/strong&gt;客户机连接，并产生&lt;strong&gt;多个进程&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;每个进程都有自己的连接套接字，通过这些套接字可以收到 HTTP 请求和发送 HTTP 响应。&lt;/li&gt;
&lt;li&gt;高性能 Web 服务器通常只使用一个&lt;strong&gt;进程&lt;/strong&gt;，可以为每个新连接创建一个&lt;strong&gt;新线程&lt;/strong&gt;（是一个&lt;strong&gt;轻量级的子进程&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;持久 HTTP，客户机与服务器之间经由&lt;strong&gt;同一个服务器套接字&lt;/strong&gt;交换 HTTP 报文。&lt;/li&gt;
&lt;li&gt;非持久 HTTP，每一对请求/响应，都要&lt;strong&gt;创建一个新的 TCP 连接&lt;/strong&gt;，响应后即关闭。影响 Web 服务器的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;可靠的数据传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可靠的数据传输&#34;&gt;#&lt;/a&gt; 可靠的数据传输&lt;/h1&gt;
&lt;p&gt;数据可以通过一条&lt;strong&gt;可靠信道传输&lt;/strong&gt;。即传输的数据&lt;strong&gt;不出错、丢失，并按照发送顺序&lt;/strong&gt;传送&lt;/p&gt;
&lt;h2 id=&#34;服务实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务实现&#34;&gt;#&lt;/a&gt; 服务实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由&lt;strong&gt;可靠数据传输协议&lt;/strong&gt;负责&lt;/li&gt;
&lt;li&gt;由于现实存在的各种干扰，低层信道可能不太可靠，通过使用&lt;strong&gt;可靠数据传输协议来保证可靠的数据传输&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;需要&lt;strong&gt;分别&lt;/strong&gt;设计开发可靠数据传输协议的发送方和接收方&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112143658-txhw12i.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发送方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;​&lt;code&gt;rdt_send()&lt;/code&gt; ​ 调用可靠数据传输协议的发送方（rdt 表示可靠数据传输协议）&lt;/li&gt;
&lt;li&gt;​&lt;code&gt;udt_send()&lt;/code&gt; ​ 用于发送分组给对方（udt 表示不可靠数据传输）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个分组从信道抵达时，调用 &lt;code&gt;rdt_rcv()&lt;/code&gt; ​ 接收&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;deliver_data()&lt;/code&gt; ​ 将数据交付给上层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只考虑&lt;strong&gt;单项数据传输&lt;/strong&gt;，数据传输从发送方到接收方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发送方和接收方可以来回交换控制分组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;strong&gt;有限状态机（FSM）&lt;/strong&gt; 来定义发送方和接收方&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;有限状态机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有限状态机&#34;&gt;#&lt;/a&gt; 有限状态机&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;箭头表示协议从一个状态变迁到另一个状态。&lt;/li&gt;
&lt;li&gt;横线上方：表示引起变迁的事件；&lt;/li&gt;
&lt;li&gt;横线下方：表示事件发生时所采取的动作；&lt;/li&gt;
&lt;li&gt;^：表示没有事件或未采取动作&lt;/li&gt;
&lt;li&gt;虚线表示 FSM 的初始状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112144341-4tz2aum.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;构造可靠的数据传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造可靠的数据传输协议&#34;&gt;#&lt;/a&gt; 构造可靠的数据传输协议&lt;/h2&gt;
&lt;h3 id=&#34;完全可靠信道上的可靠数据传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完全可靠信道上的可靠数据传输&#34;&gt;#&lt;/a&gt; 完全可靠信道上的可靠数据传输&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;rdt1.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;底层信道完全可靠，数据传输&lt;strong&gt;不出错不丢失&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;收发双方&lt;strong&gt;速率匹配&lt;/strong&gt;：接收方接收数据速率 == 发送方发送数据速率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112144641-ingdjfi.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;所有的分组都是从发送方流向接收方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收方无需反馈信息给发送方，因为不会发生任何差错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发送方：向底层信道发送数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从上层接受数据 &lt;code&gt;rdt_send(data)&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;封装&lt;/strong&gt;成分组 &lt;code&gt;packet = make_pkt(data)&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;将分组发送到信道中 &lt;code&gt;udt_send(packet)&lt;/code&gt;​&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收方：从底层信道读取数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从底层信道接收一个分组 &lt;code&gt;rdt_rcv(packet)&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解封&lt;/strong&gt;取出数据 &lt;code&gt;extract(packet，data)&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;数据传给上层 &lt;code&gt;deliver_data(data)&lt;/code&gt;​&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;具有比特差错信道上的可靠数据传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具有比特差错信道上的可靠数据传输&#34;&gt;#&lt;/a&gt; 具有比特差错信道上的可靠数据传输&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;rdt2.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;信道不完全可靠，&lt;strong&gt;有可能产生比特差错，但不丢包&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;所有分组&lt;strong&gt;按发送顺序被接收&lt;/strong&gt;（有些比特可能会出错——如何从错误中恢复？——肯定/否定确认）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自动重传请求协议 ARQ：基于重传机制的可靠数据传输协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;差错检测
&lt;ul&gt;
&lt;li&gt;使接收方检测出&lt;strong&gt;是否出现比特差错&lt;/strong&gt;。如采用差错检测和纠错技术，使接收方能够进行差错检测并纠正&lt;/li&gt;
&lt;li&gt;需要给分组&lt;strong&gt;附加额外的比特&lt;/strong&gt;一起发送。如 rdt2.0 协议，分组增加&lt;strong&gt;检验&lt;/strong&gt;和 &lt;strong&gt;checksum 字段&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接收方反馈
&lt;ul&gt;
&lt;li&gt;使发送方知道发送的分组是否被正确接收&lt;/li&gt;
&lt;li&gt;肯定确认 ACK：使发送方知道哪些内容被正确接收&lt;/li&gt;
&lt;li&gt;否定确认 NAK：使发送方知道哪些内容有误需要重传&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重传
&lt;ul&gt;
&lt;li&gt;接收方收到有差错的分组时，通知发送方重传该分组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rft2.0 采用了&lt;strong&gt;差错检测&lt;/strong&gt;、&lt;strong&gt;肯定确认与否定确认&lt;/strong&gt;以及&lt;strong&gt;重传&lt;/strong&gt;。&lt;br /&gt;
被称为&lt;strong&gt;停等（stop-and-wait）协议&lt;/strong&gt;：发送方发完一个分组后停止，等待对方回答&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以解决&lt;strong&gt;数据分组出错&lt;/strong&gt;的问题&lt;/li&gt;
&lt;li&gt;缺陷：若&lt;strong&gt;返回的&lt;/strong&gt; ACK 或 NAK 分组受损，发送方无法知道接收方是否正确接收了上一块数据&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;发送方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;等待来自上面的调用
&lt;ol&gt;
&lt;li&gt;等待上层数据&lt;/li&gt;
&lt;li&gt;上层数据传来 &lt;code&gt;rdt_send(data)&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;计算校验和，封装成分组 &lt;code&gt;snkpkt = make_pkt(data, checksum)&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;发送分组 &lt;code&gt;udt_send(sndpkt)&lt;/code&gt;​&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;等待 ACK 或 NAK
&lt;ul&gt;
&lt;li&gt;收到 ACK 分组 &lt;code&gt;rdt_rcv(rcvpkt) &amp;amp;&amp;amp; isACK(rcvpkt)&lt;/code&gt;​
&lt;ol&gt;
&lt;li&gt;返回初始状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;收到 NAK 分组 &lt;code&gt;rdt_rcv(rcvpkt) &amp;amp;&amp;amp; isNAK(rcvpkt)&lt;/code&gt;​
&lt;ol&gt;
&lt;li&gt;重传上次发送的分组 &lt;code&gt;udt_send(sndpkt)&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;等待 ACK 或 NAK&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112151217-r8aq9qj.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送方在等待 ACK 或 NAK 状态时，&lt;strong&gt;不能从上层得到数据&lt;/strong&gt;，直到收到 ACK 离开该状态&lt;/li&gt;
&lt;li&gt;发送方在收到 ACK 分组之前，不会发送任何新数据，直到收到 ACK 分组为止&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;接收方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241112151230-j6te1og.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从底层接收到一个分组，检查校验和&lt;/li&gt;
&lt;li&gt;分组出错 &lt;code&gt;rdt__rcv(rcvpkt) &amp;amp;&amp;amp; corrupt(rcvpkt)&lt;/code&gt;​
&lt;ol&gt;
&lt;li&gt;丢弃分组&lt;/li&gt;
&lt;li&gt;返回 NAK 分组 &lt;code&gt;udt_send(make_pkt(NAK))&lt;/code&gt;​&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;分组无错 &lt;code&gt;rdt_rcv(rcvpkt) &amp;amp;&amp;amp; notcorrupt(rcvpkt)&lt;/code&gt;​
&lt;ol&gt;
&lt;li&gt;从分组中取出数据 &lt;code&gt;extract(rcvpkt, data)&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;将数据传给上层 &lt;code&gt;deliver_data(data)&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;返回 ACK 分组 &lt;code&gt;udt_send(make_pkt(ACK))&lt;/code&gt;​&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;处理受损 ACK 和 NAK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ACK 或 NAK 受损：收发双方互不理解对方回答的含义——对话不能正常进行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;增加足够的检验和比特&lt;/strong&gt;：使接收方不仅可以检测差错，还可进行恢复。适用于会产生差错但不丢失分组的信道。&lt;/li&gt;
&lt;li&gt;当发送方收到&lt;strong&gt;含糊不清的 ACK 或 NAK 分组&lt;/strong&gt;时：只简单地重发当前数据分组。
&lt;ul&gt;
&lt;li&gt;产生&lt;strong&gt;冗余分组&lt;/strong&gt;(duplicate packets)：&lt;strong&gt;同一个分组收到两次&lt;/strong&gt;。接收方无法知道收到的是新的分组还是重传的分组。&lt;/li&gt;
&lt;li&gt;解决冗余分组：给分组添加一个序号字段
&lt;ul&gt;
&lt;li&gt;发送方：给发送的数据分组编号，并将其序号放入“序号字段” 。 每发送一个新的分组“序号加 1”。&lt;/li&gt;
&lt;li&gt;接收方：通过检查序号，确定收到的分组是不是重复传送。 按序号接收，若本次接收到的分组序号与前一次收到的分组的序号相同，即为重复分组，将该重复分组丢弃。&lt;/li&gt;
&lt;li&gt;停等协议只需用一个比特，即“0”和“1”两种不同的序号。序号通过模 2 运算向前移动，可以区分前后相邻的两帧。0、1、0、1、……&lt;/li&gt;
&lt;li&gt;ACK 和 NAK 分组不需要指明要确认的序号。因为假设信道不丢失分组。&lt;/li&gt;
&lt;li&gt;发送方知道所接收的 ACK 和 NAK 分组是对最近发送分组的响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rdt21&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdt21&#34;&gt;#&lt;/a&gt; rdt2.1&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发送方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理受损的 ACK/NAK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119132033-f1sh90b.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收到&lt;strong&gt;乱序的分组&lt;/strong&gt;：是重复分组，丢弃，并回发 ACK&lt;/li&gt;
&lt;li&gt;收到&lt;strong&gt;受损的分组&lt;/strong&gt;：丢弃，回发 NAK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119132045-mjnlier.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rdt22&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdt22&#34;&gt;#&lt;/a&gt; rdt2.2&lt;/h4&gt;
&lt;p&gt;改进：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;接收方收到受损的分组时丢弃，不发送 NAK，改为&lt;strong&gt;发送一个对前一个正确接受分组的 ACK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119132306-fspcgjw.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发送方接收到对同一个分组的两个 ACK（接收冗余 ACK）后可知道接收方没有正确接收到跟在被确认两次的分组后面的分组&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119132244-2l22ouz.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;具有比特差错的丢包信道上的可靠数据传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具有比特差错的丢包信道上的可靠数据传输&#34;&gt;#&lt;/a&gt; 具有比特差错的丢包信道上的可靠数据传输&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;rdt3.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;会出现&lt;strong&gt;比特差错&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;会&lt;strong&gt;丢包&lt;/strong&gt;：发送的数据分组丢失，或接收方回发的 ACK 丢失。&lt;/li&gt;
&lt;li&gt;发送方如何发现丢包以及丢包后如何处理：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;超时重发&lt;/strong&gt;：由发送方负责检测丢包和恢复，即发送方发送一个数据分组后，等待一定时间，如果该段时间内没有收到 ACK，则重传分组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间选择&lt;/strong&gt;：通常为“从发送方发出分组到收到接收方应答所需的平均时间” 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;产生冗余分组&lt;/strong&gt;：一个分组在网络中经历了一个特别大的时延，使发送方超时重传（该数据分组或 ACK 并未丢失），可通过序号解决。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重传的实现：设置一个“递减（倒）计数定时器”，给定时间过期后，中断发送方。要求发送方：
&lt;ul&gt;
&lt;li&gt;每发送一个分组(包括第一次和重发的分组)，启动一个定时器；&lt;/li&gt;
&lt;li&gt;响应定时器中断(采取适当的动作)&lt;/li&gt;
&lt;li&gt;终止定时器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;发送方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119132528-9wodqka.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;运行情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119132614-0umrdv0.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;停止等待协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#停止等待协议&#34;&gt;#&lt;/a&gt; 停止等待协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;V(S)：&lt;strong&gt;发送序号变量&lt;/strong&gt;，发送新分组时，V(S) + 1&lt;/li&gt;
&lt;li&gt;N(S)：分组序号字段，当前传送分组的编号&lt;/li&gt;
&lt;li&gt;V(R)：&lt;strong&gt;接收序号变量&lt;/strong&gt;，当前准备接收的分组序号，每收到一个新分组时，V(R)+1&lt;/li&gt;
&lt;li&gt;判断重复分组：
&lt;ul&gt;
&lt;li&gt;​&lt;code&gt;N(S) == V(R)&lt;/code&gt;​，收到的是新数据分组&lt;/li&gt;
&lt;li&gt;​&lt;code&gt;N(S) != V(R)&lt;/code&gt;​，收到的是重复分组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;发送方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119132907-b5ccvkf.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接收方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119132924-199rq82.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能&#34;&gt;#&lt;/a&gt; 性能&lt;/h3&gt;
&lt;p&gt;能够正常工作，但效率不高&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送方（信道）利用率&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mtext&gt;发送方将比特发送到信道的时间&lt;/mtext&gt;&lt;mtext&gt;发送时间&lt;/mtext&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;U_{sender} = \frac{\text{发送方将比特发送到信道的时间}
}{\text{发送时间}}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3361em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.109em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;se&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;er&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.0463em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.3603em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord text&#34;&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;发送时间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord text&#34;&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;发送方将比特发送到信道的时间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传输时延：&lt;code&gt;L / R&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;发送时间：发送方从发送分组开始到收到对方 ACK 分组所需的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119133338-85ekqpe.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送方只有 0.027% 的时间忙。&lt;/li&gt;
&lt;li&gt;发送方在 30.008ms 内只能发送 1000byte，有效的吞吐量仅为 267kbit/s(即使有 1Gbit/s 的链路可用)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;改进：&lt;strong&gt;流水线技术&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许发送方连续发送多个分组而无需等待确认&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119133503-11xe974.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;流水线协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流水线协议&#34;&gt;#&lt;/a&gt; 流水线协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;N&lt;/em&gt; 为连续发送分组个数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;U_{sender} = N\frac{L/R}{L/R + RTT}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3361em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.109em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;se&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;er&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.363em;vertical-align:-0.936em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.427em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;RTT&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.936em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;令 &lt;em&gt;N&lt;/em&gt; = 3&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119133625-fvklo52.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;技术要点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技术要点&#34;&gt;#&lt;/a&gt; 技术要点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;增加序号范围：由于可&lt;strong&gt;连续发送多个分&lt;/strong&gt;组，每个分组有唯一序号，可能有多个在传输中的未确认报文。&lt;/li&gt;
&lt;li&gt;需要&lt;strong&gt;缓存多个分组&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;发送方至少能缓冲已发送但没有确认的分组；&lt;/li&gt;
&lt;li&gt;接收方缓存已正确接收的分组。
&lt;ul&gt;
&lt;li&gt;序号范围和对缓冲的要求取决于数据传输协议处理丢失、差错及过度延时分组的方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流水线协议类型：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;回退 N 步 (Go-Back-N) GBN&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择性重传 (selective repeat) SR&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gbn-回退-n-步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gbn-回退-n-步&#34;&gt;#&lt;/a&gt; GBN 回退 N 步&lt;/h3&gt;
&lt;p&gt;缺点：可能需要很多的重传&lt;/p&gt;
&lt;h4 id=&#34;基本思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本思想&#34;&gt;#&lt;/a&gt; 基本思想&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;发送方：&lt;strong&gt;连续发送多个数据分组&lt;/strong&gt;，停止等待
&lt;ul&gt;
&lt;li&gt;收到确认 ACK，继续发送后面分组&lt;/li&gt;
&lt;li&gt;超时，未收到应答，&lt;strong&gt;从出错分组开始重发&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接收方：&lt;strong&gt;按序号接收数据分组&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;正确：接收处理，发确认 ACK&lt;/li&gt;
&lt;li&gt;出错：&lt;strong&gt;将该分组及后面分组均丢弃&lt;/strong&gt;，不发任何应答。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119133928-v0gpoaz.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连续发送的分组个数不能太多
&lt;ul&gt;
&lt;li&gt;增加序号字段位数&lt;/li&gt;
&lt;li&gt;出错时，要重传很多数据分组，影响效率。&lt;/li&gt;
&lt;li&gt;连发个数受流水线中未确认的分组数限制，不能超过&lt;strong&gt;最大允许数&lt;/strong&gt;​&lt;em&gt;N&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过设置&lt;strong&gt;发送窗口&lt;/strong&gt;和&lt;strong&gt;接收窗口&lt;/strong&gt;来分别控制连续发送和接收的分组个数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;发送窗口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送窗口&#34;&gt;#&lt;/a&gt; 发送窗口&lt;/h4&gt;
&lt;p&gt;控制&lt;strong&gt;发送方连续发送的个数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实际是允许连续发送的序号表，只有落在发送窗口所含序号之内的，才能不等待应答发送&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119134234-ohi4oah.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;序号范围分割成 4 部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;​&lt;code&gt;[0，base-1]&lt;/code&gt;​：已经发送并确认过的分组。&lt;/li&gt;
&lt;li&gt;​&lt;code&gt;[base，nextseqnum-1]&lt;/code&gt;​：已经发送但未被确认分组。&lt;/li&gt;
&lt;li&gt;​&lt;code&gt;[nextseqnum，base+N-1]&lt;/code&gt;​：用于将立即发送的分组。&lt;/li&gt;
&lt;li&gt;​&lt;code&gt;[base+N, end]&lt;/code&gt;​：不能使用，直到当前流水线中未被确认的分组得到确认(序号为 base 的分组)。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;窗口大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_T = N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，即序号范围 &lt;code&gt;[base，base+N-1]&lt;/code&gt;​，包括已发送未被确认的分组、以及准备发送的分组。&lt;/li&gt;
&lt;li&gt;随着协议的运行，发送的分组陆续被确认，发送窗口在序号空间内向前滑动。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GBN 协议常被称为&lt;strong&gt;滑动窗口协议(sliding-window protocol)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119134604-7wybwi3.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_T = 8&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发送方发送 0 ～ 7 共 8 分组，停止等待应答；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收方全部正确收到，分别发应答，窗口序号变为 0（准备收 0 分组）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应答全部到达：发方接着发送 8 个新分组 0 ～ 7，协议正确进行；&lt;/li&gt;
&lt;li&gt;应答全部丢失：发方超时，重新发送 8 个旧分组 0 ～ 7， 收方出现重复分组接收，协议错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;最大尺寸&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若序号位数 k 位，发送窗口最大尺寸是 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_{T}=2^{k}-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.9324em;vertical-align:-0.0833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8491em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;序号取值范围&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果分组序号字段的位数是 k，则序号范围是 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;[0,2^{k}-1]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.0991em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.1667em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8491em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。即序号在 0 至 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{k}-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.9324em;vertical-align:-0.0833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8491em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的范围循环&lt;/p&gt;
&lt;h4 id=&#34;发送方扩展-fsm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送方扩展-fsm&#34;&gt;#&lt;/a&gt; 发送方扩展 FSM&lt;/h4&gt;
&lt;p&gt;以上给出了一个基于 ACK、无 NAK 的 GBN 协议。&lt;/p&gt;
&lt;p&gt;GBN 发送方响应三种事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上层的调用： 上层调用 &lt;code&gt;rdt_send()&lt;/code&gt; ​ 检查发送窗口是否已满（是否有 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个已发送、但未被确认的分组）
&lt;ul&gt;
&lt;li&gt;窗口未满：创建一个分组并将其发送，更新变量；&lt;/li&gt;
&lt;li&gt;窗口已满：将数据返回给上层，以后再试。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;收到 ACK： 对序号为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.4306em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的分组的确认使用&lt;strong&gt;累积确认&lt;/strong&gt;，即表明接收方已正确接收到序号为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.4306em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; ​&lt;strong&gt;及以前的所有分组&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;超时：设置定时器处理“丢失数据或确认分组”的情况。
&lt;ul&gt;
&lt;li&gt;只使用一个定时器，作为最早的已发送但未被确认的分组的定时。&lt;/li&gt;
&lt;li&gt;产生超时，发送方&lt;strong&gt;重发所有已发送过但还未被确认过&lt;/strong&gt;的分组。&lt;/li&gt;
&lt;li&gt;收到一个 ACK，但仍有已发送但未被确认的分组，&lt;strong&gt;重新启动定时器&lt;/strong&gt;。 若没有未确认报文，终止定时器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119134937-0j2jgyh.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;接收方扩展-fsm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接收方扩展-fsm&#34;&gt;#&lt;/a&gt; 接收方扩展 FSM&lt;/h4&gt;
&lt;p&gt;按序接收。接收方 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_R=1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;正确按顺序接收&lt;/strong&gt;到序号为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.4306em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的分组：将分组中的数据交付到上层，并回发一个 ACK&lt;/li&gt;
&lt;li&gt;其他情况的分组：丢弃该分组，并为最近按序接收的分组重发 ACK。&lt;/li&gt;
&lt;li&gt;分组&lt;strong&gt;一次性交付&lt;/strong&gt;给上层：当分组 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6944em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 被交付时，表示 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6944em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 之前均已交付。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;丢弃所有失序分组&lt;/strong&gt;：控制简单，接收方不需要缓存任何失序分组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119135518-gexkyt7.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收方维护下一个按序接收的分组的序号，该值保存在 &lt;code&gt;expectedseqnum&lt;/code&gt; ​ 变量中&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;GBN 协议具体实现：采用过程形式（实现在响应各种事件时要采取的动作）。
&lt;ul&gt;
&lt;li&gt;如，发送方包括 &lt;code&gt;rdt_send()&lt;/code&gt;​、定时器中断、&lt;code&gt;rdt_rcv()&lt;/code&gt; ​ 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GBN 协议综合可靠数据传输的全部技术：使用序号、累积确认、检验和以及超时/重传操作等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sr-选择性重传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sr-选择性重传&#34;&gt;#&lt;/a&gt; SR 选择性重传&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GBN 协议缺陷： 出错时，要重发出错及其后分组，当窗口大小和带宽时延积都很大时，堵塞管道，影响效率。&lt;/li&gt;
&lt;li&gt;改进方法： 发送方&lt;strong&gt;只重传出错（丢失或受损）&lt;/strong&gt; 的分组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基本思想-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本思想-2&#34;&gt;#&lt;/a&gt; 基本思想&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发送方：连发多个数据分组，停止等待&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收到确认 ACK，继续发送后面分组；&lt;/li&gt;
&lt;li&gt;超时，未收到应答，&lt;strong&gt;只重发出错分组&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收方：&lt;strong&gt;不按序号接收&lt;/strong&gt;数据分组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正确：接收、并交付，发确认 ACK；&lt;/li&gt;
&lt;li&gt;出错：&lt;strong&gt;丢弃&lt;/strong&gt;该分组，以后正确分组&lt;strong&gt;放入缓存&lt;/strong&gt;，当出错分组正确收到后，&lt;strong&gt;按顺序一起交付&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;不按序接收。接收窗口大小 &amp;gt; 1，即&lt;strong&gt;只要序号落在接收窗口内的正确分组都可接收&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119140526-hjogi4b.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;发送窗口-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送窗口-2&#34;&gt;#&lt;/a&gt; 发送窗口&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119140602-qkn1b25.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最大尺寸&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若序号位数 k 位，发送窗口和接收窗口尺寸最大是 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{k-1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8491em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8491em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; ，即序号空间&lt;strong&gt;一半&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;若 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_{T}=W_{R}=3&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送方发送 0 ～ 2 共 3 分组，停止等待应答&lt;/li&gt;
&lt;li&gt;接收方全部正确收到，发应答，窗口滑动，允许接收 3、0、1 分组；
&lt;ul&gt;
&lt;li&gt;应答全部到达：发方发送 3 个新分组 3、0、1，协议正确进行；&lt;/li&gt;
&lt;li&gt;应答全部丢失：发方超时，重新发送 0 ～ 2 共 3 旧分组，与准备接收序号重叠，出现重复分组接收，&lt;strong&gt;协议错误&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119141327-az6ku0z.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;若 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_{T}=W_{R}=2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发方发送 0 ～ 1 共 2 分组，停止等待应答；&lt;/li&gt;
&lt;li&gt;收方全部正确收到，发应答，窗口滑动，允许接收 2 ～ 3 分组；
&lt;ul&gt;
&lt;li&gt;应答全部到达：发方发送 2 个新分组 2 ～ 3，协议正确进行；&lt;/li&gt;
&lt;li&gt;应答全部丢失：发方超时，重新发送 2 个旧分组 0 ～ 1，序号不在接收窗口内，拒绝接收，丢弃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119141337-4w36smc.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;发送方动作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送方动作&#34;&gt;#&lt;/a&gt; 发送方动作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;从上层收到数据： 当从上层接收到数据后，发送方检查下一个可用于该分组的序号
&lt;ul&gt;
&lt;li&gt;若序号&lt;strong&gt;在发送方窗口内&lt;/strong&gt;，则将数据打包并发送&lt;/li&gt;
&lt;li&gt;否则与 GBN 一样，将数据缓存，或将其返回给上层，以后再传&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;超时： 每个分组有自己的定时器，超时后只能发送一个分组。&lt;/li&gt;
&lt;li&gt;收到 ACK： 将被确认的分组标记为&lt;strong&gt;已接收&lt;/strong&gt;(若该分组序号在窗口内)。
&lt;ul&gt;
&lt;li&gt;如果该分组的序号等于发送基序号 send_base，则窗口基序号向前移动到具最小序号的未确认分组处。&lt;/li&gt;
&lt;li&gt;窗口移动后，仍有序号落在窗口内的未发送分组，继续发送。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119140735-mkdvyt7.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;接收方动作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接收方动作&#34;&gt;#&lt;/a&gt; 接收方动作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;接收方接收正确分组不管其是否有序。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;失序分组先被缓存，直到&lt;strong&gt;所有丢失分组&lt;/strong&gt;（序号更小的分组）被收到为止，才可将一批分组按序交付给上层。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序号在接收窗口内的分组被正确接收
&lt;ul&gt;
&lt;li&gt;收到的分组落在 &lt;code&gt;[rcv_base，rcv_base+N-1]&lt;/code&gt; ​ 内，接收并回发一个 ACK。&lt;/li&gt;
&lt;li&gt;如果该分组以前没收到过，则被&lt;strong&gt;缓存&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;如果该分组的序号&lt;strong&gt;等于&lt;/strong&gt;接收基序号，则该分组及已缓存的序号连续的分组交付（起始于基序号）给上层。然后，接收窗口按交付的分组数量向前移动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;收到序号在接收基序号以前的分组
&lt;ul&gt;
&lt;li&gt;该分组是接收方以前已确认过的分组：生成一个 ACK， 并回发给发送方。&lt;/li&gt;
&lt;li&gt;如果接收方不确认：发送方窗口不能向前滑动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他情况：忽略该分组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119140904-u7g9lkh.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119141005-g11m40x.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;三种协议比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三种协议比较&#34;&gt;#&lt;/a&gt; 三种协议比较&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;停等协议&lt;/th&gt;
&lt;th&gt;GBN 协议&lt;/th&gt;
&lt;th&gt;SR 协议&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;发送方&lt;/td&gt;
&lt;td&gt;发 1 个，重发出错分组&lt;/td&gt;
&lt;td&gt;连发 n 个，从出错分组开始重发&lt;/td&gt;
&lt;td&gt;连发 n 个，只重发出错分组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接收方&lt;/td&gt;
&lt;td&gt;按序号接收，出错、重复分组丢弃&lt;/td&gt;
&lt;td&gt;按序号接收，从出错分组开始丢弃&lt;/td&gt;
&lt;td&gt;不按序号接收，只丢弃出错分组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;窗口大小&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_{T}=W_{R}=3&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;1 &amp;lt; W_{T} &amp;lt;= 2^{k}-1, W_{R} =1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6835em;vertical-align:-0.0391em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.9324em;vertical-align:-0.0833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8491em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8778em;vertical-align:-0.1944em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.1667em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;1 &amp;lt; W_{T},W_{R}&amp;lt;= 2^{k-1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6835em;vertical-align:-0.0391em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8778em;vertical-align:-0.1944em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.1667em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3283em;&#34;&gt;&lt;span style=&#34;top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8491em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8491em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;校验和：检测分组传输中的比特错误；&lt;/li&gt;
&lt;li&gt;定时器：用于检测分组&lt;strong&gt;超时及重传&lt;/strong&gt;分组
&lt;ul&gt;
&lt;li&gt;分组或 ACK 丢失；&lt;/li&gt;
&lt;li&gt;一个分组被延时但未丢失（过早超时），或 ACK 丢失，接收方可能会收到重复分组。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序号：对发送方向接收方发送的数据分组&lt;strong&gt;按顺序编号&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;接收方可检测分组丢失（序号间的空隙）或重复（相同序号的分组）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;确认：接收方用其告诉发送方某个分组或其组分组已被正确地接收。
&lt;ul&gt;
&lt;li&gt;确认报文包含被确认的分组或多个分组的序号。可以是逐个的或累计。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;否认：接收方告诉发送方某个分组尚未正确地接收。包含未被正确接收的分组的序号。&lt;/li&gt;
&lt;li&gt;窗口、流水线：发送方可以连续发送序号落在发送窗口序号范围内的分组，可以不用逐个确认。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;存在问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存在问题&#34;&gt;#&lt;/a&gt; 存在问题&lt;/h2&gt;
&lt;p&gt;即使发送方或接收方的窗口中都没有包含 x，但&lt;strong&gt;可能会出现一个具有序号或确认号 x 的分组的旧拷贝&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为确保序号不被重新使用，需要发送方“确信”任何先前发送的序号为 x 的分组都不再在网络中为止。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;规定分组最长的寿命&lt;/strong&gt;：分组在网络中“生存”的时间不会超过某个固定的最长时间。
&lt;ul&gt;
&lt;li&gt;如在 TCP 中假定为大约 3 分钟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;拥塞控制原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制原理&#34;&gt;#&lt;/a&gt; 拥塞控制原理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;拥塞：太多的源太快地发送太多的数据，使网络来不及处理。
&lt;ul&gt;
&lt;li&gt;丢包：路由器缓冲区溢出&lt;/li&gt;
&lt;li&gt;长时延：路由器缓冲区中排队&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对丢失的分组重传，不能解决网络拥塞问题。&lt;/li&gt;
&lt;li&gt;网络拥塞时需要&lt;strong&gt;遏制发送方&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;网络中的 10 大主要问题之一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;拥塞原因与代价&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞原因与代价&#34;&gt;#&lt;/a&gt; 拥塞原因与代价&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;拥塞原因：资源未被充分利用；&lt;/li&gt;
&lt;li&gt;拥塞的代价：端系统得到很差的服务性能；&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Case1: 两个发送方和一台具有无限缓存的路由器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两台主机 A 和 B 有一条连接，理想情况下，假如 A 和 B 都有无穷大的缓存，来自主机 A 和主机 B 的分组通过一台路由器，在一段容量为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;R&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的共享式输出链路上传输，路由器带有缓存，当速率超过输出链路的容量时，路由器会缓存。假设路由器的缓存也是无限大的。&lt;/p&gt;
&lt;p&gt;不管发送速率多大，吞吐量不会超过 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;R / 2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，排队时延会随着发送速率的增大而急剧的增大。这就造成了拥塞。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Case2: 两个发送方和一台具有有限缓存的路由器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假如发送速率超过输出链路的容量，那么就会被缓存，因为路由器的缓存是有限的，所以此时如果还有数据发送过来那么就会造成丢包，丢包就会造成时延。&lt;/p&gt;
&lt;p&gt;一种理想的情况，发送方先检测路由器是否缓存满了，没满就发送数据，这种和情况 1 是一样的，吞吐量不会超过 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;R / 2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;另一种更实际的情况，发送方得知丢包了，然后选择重传数据，这种情况最大吞吐量是 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;R / 3&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后一种情况就是，发送方发送的超时分组和后来重传的分组同时被接收方收到，这样就会丢弃一个，这种情况的吞吐量是 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;R / 4&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;拥塞控制方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制方法&#34;&gt;#&lt;/a&gt; 拥塞控制方法&lt;/h2&gt;
&lt;p&gt;根据网络层是否为传输层拥塞控制提供明确的帮助，分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端到端拥塞控制：网络层&lt;strong&gt;没有&lt;/strong&gt;为传输层拥塞控制提供明确的支持。
&lt;ul&gt;
&lt;li&gt;端系统必须通过&lt;strong&gt;对网络行为的观察&lt;/strong&gt; (如分组丢失与时延) 来推断网络中是否存在拥塞。&lt;/li&gt;
&lt;li&gt;如，用于 TCP 的拥塞控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络辅助的拥塞控制： &lt;strong&gt;网络层构件&lt;/strong&gt; (即路由器) 向发送方提供关于网络拥塞状态的&lt;strong&gt;明确反馈信息。&lt;/strong&gt; 如：
&lt;ul&gt;
&lt;li&gt;用一个比特指示链路中的拥塞情况；&lt;/li&gt;
&lt;li&gt;路由器明确地通知发送方，它(路由器)能在输出链路上支持的传输速率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;拥塞信息反馈方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞信息反馈方式&#34;&gt;#&lt;/a&gt; 拥塞信息反馈方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;直接反馈：路由器直接通过&lt;strong&gt;阻塞分组&lt;/strong&gt;告知发送方。&lt;/li&gt;
&lt;li&gt;经由接收方的反馈：路由器对从发送方流向接收方的分组中的某个字段进行标记或更新，来指示是否拥塞。
&lt;ul&gt;
&lt;li&gt;当接收方收到有&lt;strong&gt;拥塞标记&lt;/strong&gt;的分组后，就通知发送方网络发生了拥塞（至少要经过一个完整的往返时间）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;atm-abr-拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#atm-abr-拥塞控制&#34;&gt;#&lt;/a&gt; ATM ABR 拥塞控制&lt;/h2&gt;
&lt;p&gt;ATM ABR 拥塞控制：基于速率的方法。 即发送方明确地计算出它所能发送的最大速率，并以此进行调整。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ATM 异步传输模式：(Asynchronous TransferMode)
&lt;ul&gt;
&lt;li&gt;建立在&lt;strong&gt;电路交换&lt;/strong&gt;和&lt;strong&gt;分组交换&lt;/strong&gt;的基础上的一种面向连接的快速分组交换技术。&lt;/li&gt;
&lt;li&gt;采用&lt;strong&gt;虚电路 VC&lt;/strong&gt;。从源到目的路径上的每台交换机维持虚电路 VC 状态，可以跟踪各个发送方的行为，并采取源特定拥塞控制动作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ABR 可用比特率（available bit-rate）
&lt;ul&gt;
&lt;li&gt;是一种弹性数据传输服务。&lt;/li&gt;
&lt;li&gt;网络轻载时，ABR 服务会充分利用空闲的可用带宽；&lt;/li&gt;
&lt;li&gt;网络拥塞时，ABR 服务会将其传输速率抑制为预先确定的最小传输速率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架&#34;&gt;#&lt;/a&gt; 框架&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据信元：从源经过一系列中间交换机传输到目的地。&lt;/li&gt;
&lt;li&gt;资源管理信元(RM cell)：散布在数据信元中。用来在主机和交换机之间&lt;strong&gt;传递与拥塞相关的信息&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;当一个 RM 信元到达目的地时，将被“掉转方向”回送给发送方 (可能做修改)；&lt;/li&gt;
&lt;li&gt;交换机也可以自己产生一个 RM 信元，并将该 RM 信元直接发送给源。&lt;/li&gt;
&lt;li&gt;因此，RM 信元用来&lt;strong&gt;提供直接网络反馈和经由接收方的网络反馈&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241119144114-t1ylitj.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;通知拥塞信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通知拥塞信息&#34;&gt;#&lt;/a&gt; 通知拥塞信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;EFCI（显式转发拥塞指示）比特
&lt;ul&gt;
&lt;li&gt;每一个数据信元都包含 1-bit 的 EFCI 。&lt;/li&gt;
&lt;li&gt;网络拥塞时，交换机把 EFCI 比特设置为“1”告知目的主机网络已经拥塞。&lt;/li&gt;
&lt;li&gt;目的地检查所有收到的数据信元中的 EFCI 比特
&lt;ul&gt;
&lt;li&gt;当 RM 信元到达时，&lt;strong&gt;如果多数近来收到的数据信元的 EFCI 比特都被置为 1&lt;/strong&gt;，就将 RM 信元的&lt;strong&gt;拥塞指示比特(CI 比特)置为&lt;/strong&gt; 1，并将该 RM 信元回发发送方。&lt;/li&gt;
&lt;li&gt;发送方通过 RM 信元中的 CI 比特，得到网络交换机拥塞的通知。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CI(拥塞指示)和 NI(无增长)比特
&lt;ul&gt;
&lt;li&gt;发送方发出的 RM 信元是分散在数据单元当中的。散布比率可调，默认值是每 32 个数据信元中有一个 RM 信元。&lt;/li&gt;
&lt;li&gt;RM 信元中有一个 &lt;strong&gt;CI 比特&lt;/strong&gt;和 &lt;strong&gt;NI 比特&lt;/strong&gt;，可被拥塞网络的交换机设置。&lt;/li&gt;
&lt;li&gt;轻微拥塞时将 &lt;strong&gt;NI 比特&lt;/strong&gt;置为 1，严重拥塞时把 &lt;strong&gt;CI 比特&lt;/strong&gt;置为 1。
&lt;ul&gt;
&lt;li&gt;当目的主机收到一个 RM 信元时，将把该 RM 信元发回给发送方，不改变 CI 与 NI 比特。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ER（显式速率）的设置
&lt;ul&gt;
&lt;li&gt;每一个 RM 信元包含一个两字节的 ER 字段。该字段被设置为从源至目的地的路径上的所有交换机中的&lt;strong&gt;最小可支持速率&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;拥塞的交换机可以降低经过的 RM 信元中 ER 字段的值。&lt;/li&gt;
&lt;li&gt;ATM ABR 源根据一个返回的 RM 信元中的 &lt;strong&gt;CI、NI 及 ER 值&lt;/strong&gt;来调整其发送信元的速率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;无连接传输udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无连接传输udp&#34;&gt;#&lt;/a&gt; 无连接传输：UDP&lt;/h1&gt;
&lt;h1 id=&#34;面向连接的传输tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向连接的传输tcp&#34;&gt;#&lt;/a&gt; 面向连接的传输：TCP&lt;/h1&gt;
&lt;p&gt;采用：差错检测、重传、累积确认、定时、序号和确认序号。&lt;/p&gt;
&lt;h2 id=&#34;tcp-连接管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-连接管理&#34;&gt;#&lt;/a&gt; TCP 连接管理&lt;/h2&gt;
&lt;p&gt;在一个应用进程可以开始向另一个应用进程发送数据之前，这两个进程必须先相互握手——即相互发送预备报文段，以建立确保数据传输的参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点对点 point-to-point：TCP 连接是在单个发送方与单个接收方之间的连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三次握手-tree-way-handshake&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三次握手-tree-way-handshake&#34;&gt;#&lt;/a&gt; 三次握手 Tree-way handshake&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;客户端向服务器端发送特殊 TCP 报文段：&lt;strong&gt;SYN 报文段&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;不承载有效载荷（应用层数据）&lt;/li&gt;
&lt;li&gt;报文段首部的标志位（SYN 比特）被置为 1&lt;/li&gt;
&lt;li&gt;客户随机选择一个初始序号（&lt;code&gt;client_isn&lt;/code&gt;​），将此编号放置于该起始的 TCP SYN 报文段的序号字段中&lt;/li&gt;
&lt;li&gt;该报文段会被封装在一个 IP 数据报中，并发送给服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务器用另一个特殊 TCP 报文段响应：&lt;strong&gt;SYNACK 报文段&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一旦包含 TCP SYN 报文段的 IP 数据报到达服务器主机，服务器会从该数据报中提取出 TCP SYN 报文段，为该 TCP 连接分配 TCP 缓存和变量，并向该客户 TCP 发送允许连接的报文段&lt;/li&gt;
&lt;li&gt;这个允许连接的报文段不包含应用层数据&lt;/li&gt;
&lt;li&gt;在报文段首部包含 3 个重要信息
&lt;ul&gt;
&lt;li&gt;SYN 比特置 1&lt;/li&gt;
&lt;li&gt;确认号字段置为 &lt;code&gt;client_isn + 1&lt;/code&gt;​&lt;/li&gt;
&lt;li&gt;序号字段置为服务器自己选择的初始序号 &lt;code&gt;server_isn&lt;/code&gt;​&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户再用第三个特殊报文段响应
&lt;ul&gt;
&lt;li&gt;在收到 SYNACK 报文段后，客户为该连接分配缓存和变量&lt;/li&gt;
&lt;li&gt;向服务器发送另一个报文段
&lt;ul&gt;
&lt;li&gt;对服务器的允许连接报文段进行确认
&lt;ul&gt;
&lt;li&gt;将 &lt;code&gt;server_isn + 1&lt;/code&gt; ​ 置于确认号字段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SYN 比特置 0&lt;/li&gt;
&lt;li&gt;可以携带应用层数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241125192846-40x2b1p.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;信息传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息传输&#34;&gt;#&lt;/a&gt; 信息传输&lt;/h3&gt;
&lt;p&gt;一旦建立一条 TCP 连接，两个应用进程之间就可以相互发送数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户进程通过套接字传递数据流。TCP 将这些数据存入连接的&lt;strong&gt;发送缓存（send buffer）&lt;/strong&gt; 中（在三次握手期间设置）&lt;/li&gt;
&lt;li&gt;TCP 从缓存中取出数据并传递到网络层
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;最大报文段长度 MSS（Maximum Segment Size）&lt;/strong&gt; ：取出并放入报文段的数据数量（应用层数据的最大长度，不包括首部长度）&lt;/li&gt;
&lt;li&gt;MSS 通常根据最初确定的&lt;strong&gt;最大链路层帧长度&lt;/strong&gt; &lt;strong&gt;（最大传输单元 Maximum Transmission Unit,&lt;/strong&gt; &lt;strong&gt;MTU&lt;/strong&gt; &lt;strong&gt;）&lt;/strong&gt; 来设置（由本地主机发送）&lt;/li&gt;
&lt;li&gt;MSS 保证一个 TCP 报文段加上 TCP/IP 首部长度（40Bytes）适合单个链路层帧（以太网和 PPP 链路层协议都具有 1500 字节的 MTU），MSS 的典型值为 &lt;strong&gt;1460&lt;/strong&gt; 字节&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TCP 为每块客户数据配上一个 TCP 首部，从而形成多个 &lt;strong&gt;TCP 报文段&lt;/strong&gt; &lt;strong&gt;（TCP segment）&lt;/strong&gt; 。
&lt;ul&gt;
&lt;li&gt;这些报文段被下传到网络层，网络层将其分别封装在网络层 IP 数据报中&lt;/li&gt;
&lt;li&gt;随后这些 IP 数据报就被发送到网络中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当 TCP 在另一端接收到一个报文段后，该报文段的数据就被放入该 TCP 连接的&lt;strong&gt;接收缓存&lt;/strong&gt;中，应用程序从此缓存中读取数据流&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241124160453-oi3e79r.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;四次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四次挥手&#34;&gt;#&lt;/a&gt; 四次挥手&lt;/h3&gt;
&lt;p&gt;当连接结束后，将释放主机中的资源（缓存和变量）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户应用进程发出关闭连接命令
&lt;ul&gt;
&lt;li&gt;首部 &lt;strong&gt;FIN 比特&lt;/strong&gt;置 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务器收到报文段后，向发送放回送一个确认报文段&lt;/li&gt;
&lt;li&gt;服务器发送自己的终止报文段
&lt;ul&gt;
&lt;li&gt;首部 &lt;strong&gt;FIN 比特&lt;/strong&gt;置 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户对服务器的终止报文段进行确认&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241125193157-z9lhqd9.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;tcp-状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-状态&#34;&gt;#&lt;/a&gt; TCP 状态&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;客户端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241125193239-a54ttmw.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;‍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务器端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‍&lt;/p&gt;
&lt;h2 id=&#34;tcp-报文段结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-报文段结构&#34;&gt;#&lt;/a&gt; TCP 报文段结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首部&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源端口号&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;目的端口号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用于多路复用/分解来自或送到上层应用的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32-bits &lt;strong&gt;序号字段&lt;/strong&gt; （sequence number field）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32-bits &lt;strong&gt;确认号字段&lt;/strong&gt; （acknowledgment number field）&lt;/p&gt;
&lt;p&gt;实现可靠数据传输服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;16-bits &lt;strong&gt;接收窗口字段&lt;/strong&gt; （receive window field）&lt;/p&gt;
&lt;p&gt;用于流量控制，指示接收方愿意接受的字节数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4-bits &lt;strong&gt;首部长度字节&lt;/strong&gt;（header length field）&lt;/p&gt;
&lt;p&gt;指示了以 32 比特为单位的 TCP 首部长度（因为选项字段通常为空，所以 TCP 首部的典型长度为 20 字节）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可选与变长的&lt;strong&gt;选项字段&lt;/strong&gt; （options field）&lt;/p&gt;
&lt;p&gt;用于发送方和接收方协商最大报文段长度（MSS），或在高速网络环境下作为窗口调节因子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6-bits &lt;strong&gt;标志字段&lt;/strong&gt;（flag field）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACK：指示确认字段中的值是有效的&lt;/li&gt;
&lt;li&gt;RST/SYN/FIN：连接建立和拆除&lt;/li&gt;
&lt;li&gt;CWR/ECE：明确拥塞通告&lt;/li&gt;
&lt;li&gt;PSH：若被置位，则指示接收方应立即将数据交给上层&lt;/li&gt;
&lt;li&gt;URG：指示报文段存放着“紧急”数据。紧急数据的最后一个字节有 16-bits 的&lt;strong&gt;紧急数据指针字段（urgent data pointer field）&lt;/strong&gt; 指出。当紧急数据存在并给出指向紧急数据尾指针的时候，TCP 必须通知接收端的上层实体&lt;/li&gt;
&lt;li&gt;实际上 PSH、URG 和紧急数据指针并未使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241124160552-x6jdimv.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;序号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序号&#34;&gt;#&lt;/a&gt; 序号&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TCP 将数据看成一个无结构的、有序的字节流，序号建立在&lt;strong&gt;传送的字节流&lt;/strong&gt;之上，而不是建立在传送的报文段的序列之上&lt;/li&gt;
&lt;li&gt;一个报文段的&lt;strong&gt;序号&lt;/strong&gt;是该报文段首字节的字节流编号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：主机 A 发送一个 500 000 字节的文件（MSS 为 1000 字节），设数据流的首字节编号为 0，则该 TCP 将为数据流构建 500 个（500 000 / 1000）报文段，给第一个报文段分配序号 0，第二个报文段分配序号 1000，以此类推&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241124175604-a4kli69.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;确认号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#确认号&#34;&gt;#&lt;/a&gt; 确认号&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP 是全双工的，因此主机 A 在向主机 B 发送数据时，也可能接收主机 B 的数据（这是同一条 TCP 连接的一部分）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机 B 发送给主机 A 的每个报文段都有一个&lt;strong&gt;序号&lt;/strong&gt;，主机 A 填充进报文段的&lt;strong&gt;确认号&lt;/strong&gt;是主机 A &lt;strong&gt;期望从主机 B 收到的下一个字节的序号&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如主机 A 已经接收了编号为：0~99 的所有字节，这时候主机 A 发送一个报文段给主机 B 时，就会在设置该报文段的确认号为 100&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;累计确认&lt;/strong&gt; &lt;strong&gt;（cumulative acknowledgment）&lt;/strong&gt; ：TCP 只确认该流中的第一个丢失字节（如接收了 0~99 和 200~300，确认号为 100）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收方会保留失序的字节，并等待缺少的字节以填补该间隔&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一条 TCP 连接的双方会随机地选择初始序号，避免冲突&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例telnet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例telnet&#34;&gt;#&lt;/a&gt; 实例：Telnet&lt;/h3&gt;
&lt;p&gt;Telnet 运行在 TCP 之上，可在任意一对主机之间工作。当主机 A 发送信息到主机 B 时，主机 B 会进行&lt;strong&gt;回显（echo back）&lt;/strong&gt; 用于确保用户发送的字符被远程主机接受并得到处理&lt;/p&gt;
&lt;p&gt;例：主机 A 向主机 B 发送信息&#39;C&#39;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241124180514-46xnm4n.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户发往服务器：字段：42；确认号：79&lt;/li&gt;
&lt;li&gt;服务器发往客户：字段：79；确认号：43&lt;/li&gt;
&lt;li&gt;对客户到服务器的数据的确认被装载在一个承载服务器到客户的数据报文段中，即这种确认是被&lt;strong&gt;捎带（piggybacked）&lt;/strong&gt; 在服务器到客户的数据报文段中的&lt;/li&gt;
&lt;li&gt;客户发往服务器：字段：43；确认号：80&lt;/li&gt;
&lt;li&gt;确认已从服务器收到的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;往返时间估计与超时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#往返时间估计与超时&#34;&gt;#&lt;/a&gt; 往返时间估计与超时&lt;/h2&gt;
&lt;p&gt;TCP 和 rdt 一样采用&lt;strong&gt;超时/重传&lt;/strong&gt;机制来处理报文段的丢失问题。但是超时间隔需要根据估计的往返时间来设置，且首先必须得大于一个 RTT&lt;/p&gt;
&lt;h3 id=&#34;估计往返时间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#估计往返时间&#34;&gt;#&lt;/a&gt; 估计往返时间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;报文段的&lt;strong&gt;样本 RTT（SampleRTT）&lt;/strong&gt; ：从某报文段被发出（交给 IP），到对该报文段的确认被收到之间的时间量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在任意时刻，TCP 仅为一个已发送的，但目前尚未被确认的报文段估计 &lt;code&gt;SampleRTT&lt;/code&gt;​，从而产生一个接近每个 RTT 的新 &lt;code&gt;SampleRTT&lt;/code&gt; ​ 值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大多数 TCP 仅在某个时刻做一次 &lt;code&gt;SampleRTT&lt;/code&gt; ​ 测量，而不是为每个发送的报文段测量&lt;/li&gt;
&lt;li&gt;且 TCP 不为已被重传的报文段计算 &lt;code&gt;SampleRTT&lt;/code&gt;​&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于路由器的拥塞和端系统负载的变化，SampleRTT 值会随之波动，所以任意给定的 SampleRTT 值都是非典型的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 维持一个 &lt;strong&gt;SampleRTT 均值（EstimatedRTT）&lt;/strong&gt; ，来估计一个典型的 &lt;code&gt;SampleRTT&lt;/code&gt;​ ​ 值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mtext&gt;   &lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;EstimateRTT = (1-α)*EstimatedRTT + α*SampleRTT\ \ \ (α=\frac{1}{8})
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ima&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;RTT&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.0037em;&#34;&gt;α&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7778em;vertical-align:-0.0833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ima&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;RTT&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.4653em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.0037em;&#34;&gt;α&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;am&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;RTT&lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.0037em;&#34;&gt;α&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.0074em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.3214em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;即一个&lt;strong&gt;指数加权移动平均&lt;/strong&gt; &lt;strong&gt;（Exponential Weighted Moving Average, EWMA）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;越近的样本能更好地反应网络当前的拥塞情况，所以最近的样本权值要大于旧样本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义 &lt;strong&gt;RTT 偏差&lt;/strong&gt; &lt;strong&gt;（DevRTT）&lt;/strong&gt; ：用于估算 &lt;code&gt;SampleRTT&lt;/code&gt; ​ ​ 偏离 &lt;code&gt;EstimatedRTT&lt;/code&gt; ​ ​ 的程度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;β&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;β&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mtext&gt;   &lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;β&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;DevRTT = (1-β)*DevRTT + β*|SampleRTT - EstimatedRTT|\ \ \ (β = \frac{1}{4})
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;De&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;RTT&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05278em;&#34;&gt;β&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7667em;vertical-align:-0.0833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;De&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;RTT&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8889em;vertical-align:-0.1944em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05278em;&#34;&gt;β&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;am&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;RTT&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ima&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;RTT&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05278em;&#34;&gt;β&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.0074em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.3214em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;SampleRTT&lt;/code&gt; ​ 波动较小，则 &lt;code&gt;DevRTT&lt;/code&gt; ​ 的值就小&lt;/p&gt;
&lt;h3 id=&#34;设置和管理重传超时间隔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置和管理重传超时间隔&#34;&gt;#&lt;/a&gt; 设置和管理重传超时间隔&lt;/h3&gt;
&lt;p&gt;假设已经给出 &lt;code&gt;EstimatedRTT&lt;/code&gt; ​ 和 &lt;code&gt;DevRTT&lt;/code&gt;​，依此来设置 TCP 超时间隔&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超时间隔 &amp;gt;= &lt;code&gt;EstimatedRTT&lt;/code&gt;​：以免造成不必要的重传
&lt;ul&gt;
&lt;li&gt;但也不能大太多，否则无法很快地重传报文段，导致传输时延大&lt;/li&gt;
&lt;li&gt;所以要求超时间隔增加一定余量，且该余量受 &lt;code&gt;SampleRTT&lt;/code&gt; ​ 值波动程度的影响——&lt;code&gt;DevRTT&lt;/code&gt;​&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;TimeoutInterval = EstimatedRTT + 4*DevRTT
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6944em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;eo&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;er&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7778em;vertical-align:-0.0833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ima&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;RTT&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;De&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;RTT&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始的 TimeoutInterval 推荐为 1s，当出现超时后，该值会加倍。当更新 EstimatedRTT 后，也会同时更新超时间隔的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可靠数据传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可靠数据传输&#34;&gt;#&lt;/a&gt; 可靠数据传输&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;网络层服务（IP 服务）是不可靠的：IP 不保证数据报的交付，不保证数据报的按序交付，也不保证数据报中数据的完整性&lt;/li&gt;
&lt;li&gt;TCP 在 IP 不可靠的服务之上建立一种&lt;strong&gt;可靠数据传输服务&lt;/strong&gt; &lt;strong&gt;（reliable datat transfer service）&lt;/strong&gt; ，确保一个进程从其接收缓存中读出的数据流是&lt;strong&gt;无损坏、无间隙、非冗余和按序&lt;/strong&gt;的数据流
&lt;ul&gt;
&lt;li&gt;即该字节流与连接的另一端系统发送出的字节流是完全相同的&lt;/li&gt;
&lt;li&gt;TCP 使用&lt;strong&gt;超时机制&lt;/strong&gt;和&lt;strong&gt;冗余确认技术&lt;/strong&gt;来实现可靠数据传输服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TCP 使用&lt;strong&gt;单一&lt;/strong&gt;的重传定时器，将多个已发送但未被确认的报文段都与一个定时器相关联&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241125183125-jxnmhsb.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个主要事件：从上层应用程序接收数据
&lt;ul&gt;
&lt;li&gt;将数据封装在一个报文段中，并把该报文段交给 IP&lt;/li&gt;
&lt;li&gt;如果定时器还未运行，则当该报文段被传给 IP 时，TCP 启动定时器&lt;/li&gt;
&lt;li&gt;该定时器的过期间隔为 &lt;code&gt;TimeoutInterval&lt;/code&gt;​&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二个主要事件：定时器超时
&lt;ul&gt;
&lt;li&gt;TCP 通过重传引起超时的报文段来响应超时时间&lt;/li&gt;
&lt;li&gt;然后 TCP 重启定时器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三个主要事件：收到 ACK
&lt;ul&gt;
&lt;li&gt;TCP 将 ACK 的值 &lt;code&gt;y&lt;/code&gt; ​ 与变量 &lt;code&gt;SendBase&lt;/code&gt;​（最早未被确认的字节的序号）进行比较&lt;/li&gt;
&lt;li&gt;​&lt;code&gt;y&lt;/code&gt; ​ 确认了字节编号在 &lt;code&gt;y&lt;/code&gt; ​ 之前的所有字节都已经收到（TCP 采用累计确认）&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;y &amp;gt; sendBase&lt;/code&gt;​，则该 ACK 是在确认一个或多个先前未被确认的报文段&lt;/li&gt;
&lt;li&gt;发送方更新 &lt;code&gt;sendBase&lt;/code&gt;​，若当前有未被确认的报文段，TCP 重新启动定时器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;超时间隔加倍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超时间隔加倍&#34;&gt;#&lt;/a&gt; 超时间隔加倍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在定时器时限过期后，TCP 重传时会将下一次的超时间隔设置为先前值的两倍（而不是使用 &lt;code&gt;EstimatedRTT&lt;/code&gt; ​ 和 &lt;code&gt;DevRTT&lt;/code&gt; ​ 推算）
&lt;ul&gt;
&lt;li&gt;超时间隔在每次重传后呈指数型增长&lt;/li&gt;
&lt;li&gt;因为定时器过期很可能是由于网络拥塞引起的，如果源持续重传分组，会使拥塞更加严重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若定时器在收到上层应用数据或收到 ACK 的情况下启动，&lt;code&gt;TimeoutInterval&lt;/code&gt; ​ 会根据 &lt;code&gt;EstimatedRTT&lt;/code&gt; ​ 和 &lt;code&gt;DevRTT&lt;/code&gt; ​ 推算得到&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快速重传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快速重传&#34;&gt;#&lt;/a&gt; 快速重传&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;超时出发重传的超时周期可能相对较长，当一个报文段丢失时，长超时周期迫使发送方延迟重传丢失的分组，增加了端到端时延&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发送方使用&lt;strong&gt;冗余 ACK（duplicate ACK）&lt;/strong&gt; 在超时事件发生之前来检测丢包情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 TCP 接收方收到一个序号大于下一个所期望的、按序的报文段时，说明数据流中有一个间隔，即有报文段丢失（这个间隔可能是由于网络中报文段丢失或重新排序造成的）&lt;/li&gt;
&lt;li&gt;由于 TCP 不使用否定确认，所以接收方不能向发送方发回一个显式的否定确认&lt;/li&gt;
&lt;li&gt;实际上，接收方对已经接收到的最后一个按序字节数据进行&lt;strong&gt;重复确认&lt;/strong&gt;（即产生一个冗余 ACK）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为发送方一个接一个地发送大量的报文段，如果一个报文段丢失，就很可能引起许多一个接一个地冗余 ACK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果 TCP 发送方接收到对相同数据的 3 个冗余 ACK，则说明跟在这个报文段之后的其他报文段都已经丢失了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所以一旦发送方接收到 3 个冗余 ACK，TCP 就执行&lt;strong&gt;快速重传（fast retransmit）&lt;/strong&gt; ：在定时器过期之前重传丢失的报文段&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241125190954-xn77t0b.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于快速重传的 TCP，可用以下代码代替 ACK 收到事件的部分：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241125191237-dwehgw0.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/image-20241125190933-mwjh7su.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;差错恢复机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#差错恢复机制&#34;&gt;#&lt;/a&gt; 差错恢复机制&lt;/h3&gt;
&lt;p&gt;TCP 的差错恢复机制可被视为 GBN 协议与 SR 协议的混合体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 使用&lt;strong&gt;选择确认（selective acknowledgment）&lt;/strong&gt; ：允许 TCP 接收方有选择地确认失序报文段，而不是累积地确认最后一个正确接收的有序报文段&lt;/li&gt;
&lt;li&gt;TCP 跳过重传哪些已经被接收方选择性确认过的报文段（即&lt;strong&gt;选择重传&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量控制&#34;&gt;#&lt;/a&gt; 流量控制&lt;/h2&gt;
&lt;h2 id=&#34;tcp-拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-拥塞控制&#34;&gt;#&lt;/a&gt; TCP 拥塞控制&lt;/h2&gt;
</content>
        <category term="CS" scheme="https://musuyin.github.io/posts/CS/" />
        <category term="计算机基础" scheme="https://musuyin.github.io/posts/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/" />
        <category term="计网" scheme="https://musuyin.github.io/posts/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%BD%91/" />
        <category term="计网" scheme="https://musuyin.github.io/tags/%E8%AE%A1%E7%BD%91/" />
        <updated>2025-09-21T07:06:24.000Z</updated>
    </entry>
</feed>
